{"version":3,"sources":["Filter.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["Filter","_this","this","_this$props","props","query","onFilter","react_default","a","createElement","tabIndex","className","aria-live","aria-atomic","onFocus","handleDatalistFocus","onBlur","handleDatalistBlur","defaultValue","value","onChange","event","target","placeholder","list","id","name","aria-label","style","margin","locations","map","location","key","referralId","venue","type","Component","Map","state","mapWasCalled","loadAPI","window","google","maps","document","getElementById","mapId","options","loadMarkers","infowindow","InfoWindow","close","markers","forEach","marker","setMap","image","url","size","Size","origin","Point","anchor","scaledSize","loc","i","push","Marker","position","lat","lng","icon","animation","title","focusedLoc","length","setAnimation","Animation","BOUNCE","setTimeout","setContent","concat","categories","shortName","formattedAddress","infoWindow","open","console","log","listenInfoWindowChange","addListener","_this2","script","src","async","defer","index","getElementsByTagName","parentNode","insertBefore","addEventListener","_this3","navigator","onLine","alert","setState","height","App","startingPlaces","alreadyCalled","badConnectionCalled","getDetailsAPI","localStorage","JSON","parse","axios","get","URLSearchParams","client_id","client_secret","ll","v","radius","then","res","setItem","stringify","data","response","groups","items","catch","err","handleFilter","trim","handleLocFocus","handleBlur","handleLocButtonInput","arrayOfOneLoc","handleBackButtonInput","handleAlreadyCalled","handleBadConnectionCalled","match","RegExp","escRegExp","filter","test","src_Filter","overflowY","scrollBehavior","onKeyPress","onClick","display","src_Map","center","zoom","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","URL","process","href","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.610e9e2f.chunk.js","sourcesContent":["/**\r\n * @file Filter.js\r\n */\r\n\r\nimport React, { Component } from 'react';\r\n\r\n/**\r\n * Searchbox (for desktop viewport) and datalist (for mobile).\r\n * @class\r\n */\r\nclass Filter extends Component {\r\n  render() {\r\n    const { query, onFilter } = this.props;\r\n\r\n    // div.is-hidden-desktop: Mobile viewport's searchbox/datalist.\r\n    // input.is-hidden-touch: Desktop viewport's searchbox.\r\n    return (\r\n      <div tabIndex=\"-1\">\r\n        <header className=\"column navbar is-primary\">\r\n          <div\r\n            className=\"is-hidden-desktop\"\r\n            aria-live=\"assertive\"\r\n            aria-atomic=\"true\"\r\n          >\r\n            <input\r\n              onFocus={() => this.props.handleDatalistFocus()}\r\n              onBlur={() => this.props.handleDatalistBlur()}\r\n              defaultValue=\"\"\r\n              value={query}\r\n              onChange={event => onFilter(event.target.value)}\r\n              placeholder=\"Input is case sensitive\"\r\n              list=\"myLocations\"\r\n              id=\"location-choice\"\r\n              name=\"location-choice\"\r\n              aria-label=\"Search locations (Case Sensitive\"\r\n            />\r\n            <datalist id=\"myLocations\" style={{ margin: 'auto' }}>\r\n              {this.props.locations.map(location => (\r\n                <option key={location.referralId + location.venue.name}>\r\n                  {location.venue.name}\r\n                </option>\r\n              ))}\r\n            </datalist>\r\n          </div>\r\n          <input\r\n            className=\"is-hidden-touch\"\r\n            defaultValue=\"\"\r\n            onFocus={() => this.props.handleDatalistFocus()}\r\n            onBlur={() => this.props.handleDatalistBlur()}\r\n            value={query}\r\n            onChange={event => onFilter(event.target.value)}\r\n            placeholder=\"Input is case sensitive\"\r\n            type=\"text\"\r\n            name=\"location-choice\"\r\n            aria-label=\"Search Locations (Case Sensitive\"\r\n          />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @exports Filter\r\n */\r\nexport default Filter;\r\n","/**\r\n * @file Map.js\r\n */\r\n\r\nimport React, { Component } from 'react';\r\n\r\n/**\r\n * Displays the map, markers and dynamically modified infowindow.\r\n * @class\r\n */\r\nclass Map extends Component {\r\n\r\n  state = {\r\n    // state set to make sure that when the value is set to true, the alert for possible non rendering due to network connectivety problems is not infinitelly recalled.    \r\n    mapWasCalled: false\r\n  }\r\n\r\n  /**\r\n   * Loads and instance of google.maps.Map, from the Google Maps API.\r\n   * @method\r\n   */\r\n  loadAPI = () => {\r\n\r\n    // Loads API and creates a map.\r\n    const map = new window.google.maps.Map(\r\n      document.getElementById(this.props.mapId),\r\n      this.props.options);\r\n    window.map = map\r\n\r\n  }\r\n\r\n  /**\r\n   * Iterate over locations and add markers to them. When a location is selected, either on the sidebar menu or in a searchbox, the instance of google.maps.InfoWindow will show and it's content will be set to the corresponding marker's location.\r\n   * @method\r\n   */\r\n  loadMarkers = (map, locations) => {\r\n    // Creates an instance of google.maps.InfoWindow.\r\n    const infowindow = new window.google.maps.InfoWindow()\r\n    // Closes previously generated instances of google.maps.InfoWindow.\r\n    infowindow.close()\r\n    // Sets previous generated instances of google.maps.Marker to a null map value, so they will not be displayed when it's time to call newer instances of it.\r\n    window.markers.forEach(marker => marker.setMap(null))\r\n    // Sets a custom marker icon.\r\n    const image = {\r\n      url: \"https://prnautica.com/wp-content/uploads/2015/12/map-marker-icon.png\",\r\n      size: new window.google.maps.Size(25, 25),\r\n      origin: new window.google.maps.Point(0, 0),\r\n      anchor: new window.google.maps.Point(17, 34),\r\n      scaledSize: new window.google.maps.Size(25, 25)\r\n    };\r\n    // Creates new markers for filtered, pressed or clicked locations.\r\n    locations.forEach((loc, i) => {\r\n      window.markers.push(i = new window.google.maps.Marker({\r\n      position: { lat: loc.venue.location.lat, lng: loc.venue.location.lng },\r\n      icon: image,\r\n      animation: null,\r\n      map: map,\r\n      title: loc.venue.name\r\n      }))\r\n      // Ensures that, either if a sidebar menu location is focused, pressed or clicked, or if there's only one filtered location left, it's InfoWindow is shown on the correspondent marker, with the correspondent data. The respective marker should do a bouncing animation.\r\n      if(this.props.focusedLoc === loc.referralId | locations.length === 1) {\r\n        i.setAnimation(window.google.maps.Animation.BOUNCE)\r\n        setTimeout(() => i.setAnimation(null), 700)        \r\n        setTimeout(() => {\r\n          infowindow.setContent(\r\n          `<div class=\"infoWindow\">\r\n            <div class=\"infoWindowHeader\"><strong>${loc.venue.name}</strong></div>\r\n            <br>\r\n            <div><strong>Description:</strong> ${loc.venue.categories[0].shortName}</div>\r\n            <div><strong>Address:</strong> ${loc.venue.location.formattedAddress[0]}, ${loc.venue.location.formattedAddress[1]}</div>\r\n            <div><strong>Provided by: </strong>SquareSpace</div>\r\n          </div>`\r\n          )\r\n          this.props.infoWindow == true ? infowindow.open(map, i) : console.log(\"False\")\r\n        }, 1200)\r\n      }\r\n\r\n      // Method call adds Listener for changing InfoWindow's content upon click\r\n      this.listenInfoWindowChange(map, i, loc, infowindow)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Changes InfoWindow's content when that marker is clicked.\r\n   */\r\n  listenInfoWindowChange = (map, marker, loc, infowindow) => {\r\n    marker.addListener('click', () => {\r\n      infowindow.setContent(\r\n      `<div class=\"infoWindow\">\r\n        <div class=\"infoWindowHeader\"><strong>${loc.venue.name}</strong></div>\r\n        <br>\r\n        <div><strong>Description:</strong> ${loc.venue.categories[0].shortName}</div>\r\n        <div><strong>Address:</strong> ${loc.venue.location.formattedAddress[0]}, ${loc.venue.location.formattedAddress[1]}</div>\r\n        <div><strong>Provided by: </strong>SquareSpace</div>\r\n\r\n      </div>`\r\n      )\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.markers = []\r\n    // Ensures that google.maps exists on closure, before calling methods that rely on it.\r\n    if (!window.google) {\r\n      // Creates a script for loading google maps CDN.\r\n      const script = document.createElement('script');\r\n      script.src = `https://maps.google.com/maps/api/js?key=AIzaSyCVQUeNoVu_7zHcGYSkSJ-BY1dU6hB_7gM`;\r\n      script.async = true\r\n      script.defer = true\r\n      const index = document.getElementsByTagName('script')[0];\r\n      index.parentNode.insertBefore(script, index);\r\n      // Loads the map, when the script for google maps is loaded.\r\n      script.addEventListener('load', event => {\r\n        this.loadAPI()\r\n      })\r\n    } \r\n  }\r\n  render() {\r\n    // lets the user know if there's no internet connection to display the map.\r\n    if(navigator.onLine === false && this.state.mapWasCalled === false) {\r\n        window.alert(\"No connection detected. The map may not display properly\")\r\n        this.setState({mapWasCalled: true})      \r\n    }  \r\n    // Reloads markers after each rerender, with it's updated locations\r\n    setTimeout(() => {\r\n      this.loadMarkers(window.map, this.props.locations)\r\n    }, 1000)\r\n\r\n    return (\r\n      <section className={this.props.mapId} style={{height: \"95vh\"}} id={this.props.mapId} aria-label={this.props.mapId}/>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @exports Map\r\n */\r\nexport default Map","import React, { Component } from 'react'\nimport axios from 'axios'\nimport escRegExp from 'escape-string-regexp'\nimport Filter from './Filter.js'\nimport Map from \"./Map.js\"\nimport './App.css';\n\n/**\n * Main component. Hub for components.\n * @class\n */\nclass App extends Component {\n\n  state = {\n    // Holds full list of locations.\n    startingPlaces: [],\n    // Holds currently typed value on the searchbar (both desktop and mobile viewports).\n    query: \"\",\n    // When set to 'true' (by this.handleAlreadyCalled() method), prevent's infinite alerts.\n    alreadyCalled: false,\n    // When set to 'true' (by this.handleBadConnectionCalled() method), prevent's infinite alerts.\n    badConnectionCalled: false,\n    // When set to 'true' (by this.handleLocFocus() and this.handleDatalistFocus() methods), show's infowindow.\n    infoWindow: false,\n    // Sets it's value to the focused location's referral ID on the sidemenu bar (<aside>)\n    focusedLoc: \"\"\n  }\n\n  // First, call API for locations\n  componentDidMount() {\n    this.getDetailsAPI()\n    }\n\n  /**\n   * Calls the Foursquare API, with the locations.\n   * @method\n   */\n  getDetailsAPI = () => {\n    if(localStorage.locations) {\n      this.setState({startingPlaces: JSON.parse(localStorage.locations)})\n      return\n    }\n    const endPoint = \"https://api.foursquare.com/v2/venues/explore?\"\n    const parameters = {\n      client_id: \"NRQZ3OTXP3KJH05HXL3RKRKRTF3WJW4MCNMHZFPIY3HKVWHH\",\n      client_secret: \"GTDZ10LLV2HYUJBTSRWV1ULDBWKXBJDZ5EQ4HAEZTCVG4AL4\",\n      query: \"food\",\n      ll: \"-22.906151,-43.110378\",\n      v: \"20190223\",\n      radius:1000\n    }\n    axios.get(endPoint + new URLSearchParams(parameters))\n    .then(res => {\n      localStorage.setItem(\"locations\", JSON.stringify(res.data.response.groups[0].items))\n      this.setState({startingPlaces:res.data.response.groups[0].items}) \n   })\n    .catch(err => console.log(err.response))\n  }\n\n  /**\n   * Once there's user input in the searchbar (Filter.js), it's value is lifted up to this main component, saved in state as 'query', be later used to filter through locations.\n   * @method\n   */\n  handleFilter = (query) => {\n    this.setState({ query: query.trim(), alreadyCalled: false, badConnectionCalled: false})\n  }\n\n  /**\n   * Ensures that the infowindow is shown only in the location currently on focus (passed in as argument) in the sidebar menu of the location list, in the desktop viewport.\n   * @method\n   */\n  handleLocFocus = (location) => {\n    this.setState({focusedLoc: location.referralId, infoWindow: true})\n  }\n\n  /**\n   * Ensures that once a location on the sidebar (desktop viewport) loses focus, it's infowindow will no longer show.\n   * @method\n   */\n  handleBlur = (location) => this.setState({infoWindow: false})\n\n  /**\n   * Pressing or clicking a location on the sidebar menu (viewport desktop) will selecte it, so only that will be shown on the sidebar.\n   * @method\n   */\n  handleLocButtonInput = (location) => {\n    let arrayOfOneLoc = []\n    arrayOfOneLoc.push(location)\n    this.setState({startingPlaces: arrayOfOneLoc})\n  }\n\n  /**\n   * Click or press on the back button restores full locations list on the sidebar menu (desktop viewport).\n   * @method\n   */\n  handleBackButtonInput = () => {\n    this.setState({query: \"\", alreadyCalled: false, badConnectionCalled: false})\n    this.getDetailsAPI()\n  }\n\n  /**\n   * Shows the infowindow of the last selected location once the datalist is focused (mobile viewport).\n   * @method\n   */\n  handleDatalistFocus = () => {\n    this.setState({infoWindow: true})\n  }\n\n  /**\n   * Hides the infowindow once the datalist lose focus (mobile view).\n   * @method\n   */\n  handleDatalistBlur = () => {\n    this.setState({infoWindow: false})\n  }\n\n  /**\n   * Stop alerts from being infinitelly called on the same query value on the search bar, when there's no matching location stored.\n   * @method\n   */\n  handleAlreadyCalled = () => this.setState({alreadyCalled: true})\n\n  /**\n   * Stop alerts from being infinitelly called on the same query value on the search bar, when there's no matching location stored and there's also no connection detected.\n   * @method\n   */\n  handleBadConnectionCalled = () => this.setState({badConnectionCalled: true})\n\n  render() {\n\n    const { query } = this.state\n\n    // Uses RegEx to filter searchbox's input (both on mobile and desktop viewports)\n    let locations = []\n    if(query.length > 0) {\n      const match = new RegExp(escRegExp(query, 'i'))\n      locations = this.state.startingPlaces.filter((location) => match.test(location.venue.name))\n    } else {\n        locations = this.state.startingPlaces\n      }\n      /* Call handlers to alert to the user if a online word search finds no locations, if the search for that word wasn't just made */\n      if(query.length !== 0 && navigator.onLine === true && locations.length === 0 && this.state.alreadyCalled === false) {\n        window.alert(\"The location you're looking for was not found.\")\n        this.handleAlreadyCalled()\n      /* Call handlers to alert to the user if a offline word search finds no locations, if the search for that word wasn't just made */\n      } else if (query.length !== 0 && navigator.onLine === false && locations.length === 0 && this.state.badConnectionCalled === false) {\n        window.alert(\"Please check your connection.\")\n        this.handleBadConnectionCalled()\n      }      \n\n    // <Filter>: Custom React Component for searchbox (desktop) and datalist (mobile), located in the header.\n    // <Filter locations>: Passes locations filtered true on this.state.query (searchbar's user input value).\n    // <aside>: Sidebar menu for displaying filtered locations.\n    // Locations.map(): Iterates over filtered locations to make them buttons for displaying the respective infowindow.\n    // button[className=\"buttonButton is-small is-danger]: Button For displaying the full location list again on the sidebar menu.\n    // button[className=\"buttonButton is-small is-danger].style: Ensures the back button is not shown when the sidebar menu shows all stored locations.\n    // <Map>: Custom React Component for displaying the map.\n    // <Map locations>: Passes locations filtered true on this.state.query (searchbar's user input value).\n    // <Map focusedLoc>: Passes the location's referral id that is currently selected on the sidebar menu (desktop view) so the bounce animation can be shown on the respective marker.\n    // <Map infoWindow>: Passes infowindow's status (true/false, i.e.: open/closed)\n    return (\n      <div className=\"App\">\n        <Filter\n          locations={locations}\n          onFilter={this.handleFilter}\n          handleDatalistFocus={this.handleDatalistFocus}\n          handleDatalistBlur={this.handleDatalistBlur}\n        />\n        <main>\n          <aside className=\"menu column is-2-desktop is-hidden-touch\" style={{overflowY: \"scroll\", scrollBehavior: \"smooth\"}} aria-label=\"locations returned from the search\">\n            <ul className=\"menu-list\">\n              {\n              locations.map(location => <li\n                key={location.venue.name + location.referralId}\n                onFocus={() => this.handleLocFocus(location)}\n                onBlur={() => this.handleBlur(location)}\n                onKeyPress={() => this.handleLocButtonInput(location)}\n                onClick={() => this.handleLocButtonInput(location)}>\n                <a tabIndex=\"0\">{location.venue.name}</a></li>)\n              }\n              <li>\n                <button className=\"button is-small is-danger\"\n                onKeyPress={() => this.handleBackButtonInput()}\n                onClick={() => this.handleBackButtonInput()}\n                style={(locations.length === 11 | locations.length === 30)\n                  ? {display:\"none\", tabIndex: 0}\n                  : {tabIndex: 0}}>Back</button>\n              </li>\n            </ul>\n          </aside>\n          <Map\n            mapId=\"map\"\n            options={{\n              center: { lat: -22.906151, lng: -43.110378 },\n              zoom: 15\n            }}\n            locations={locations}\n            focusedLoc={this.state.focusedLoc}\n            infoWindow={this.state.infoWindow}\n          />         \n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * # TODOS - [PROJECT SPECIFICATION](https://review.udacity.com/#!/rubrics/1351/view):\n *\n * @todo\n * ## Offline Use\n *\tDONE --> Made locations available offline with localStorage\n *  DONE --> add working service worker, to have offline content when there's no wifi\n *\tDONE --> handle possible lack of functionality due to loss of internet connection with alerts.\n *\tDONE --> Alerts for loss of connection for 0 locations and for map load are repeating themselves. Implement the same way I did for search with App.state.alreadyCalled\n *\t\t- Search bar (mobile and desktop)\n *\t\t- Map\n *\tOPTIONAL --> Save all information about how to run the site with service worker, in order to make a guide in README.md, with references\n *  OPTIONAL --> WATCH PLAYLIST REACT SERVICE WORKER (my own)\n *\tOPTIONAL --> try to get initial data from localStorage (obviously, you'll first have to set localStorage with the fetched foursquare API results)\n * @todo\n * ## FINISH\n *  DONE --> refine style\n *  DONE --> comment the whole thing\n *  DONE --> complete README\n *    DONE --> Credits due:\n *       - [Traversy Media' Youtube Channel for Crash Course on Bulma CSS Framework](https://www.youtube.com/watch?v=IiPQYQT2-wg)\n *       - [Prnautica.com, for marker icon](https://prnautica.com/wp-content/uploads/2015/12/map-marker-icon.png)\n *\tDONE --> review rubric\n *\tDONE --> npm run build\n *  --> send project for review\n *\n * @todo\n * ## AFTER GRADUATION, MAYBE\n *\t--> add a input to choose the type of search to make, which should automatically make 2 API calls: one for google maps and another for those addresses in Foursquare.\n *\n * ## DONE\n * ## Interface Design\n *  DONE --> Make application responsive on any device\n * ## Application Functionality\n *  #### Location Filter\n *    DONE --> text input that filters as the user types, displaying results on the view (restricting markers?)\n *      DONE --> Use regular expressions as in previous projects\n *      DONE --> What is the state for the filter and aside\n *      DONE --> Where there's state for the filter and aside\n *    DONE --> (Branch: `input-datalist`) On touch viewport, use Bulma's property `datalist`, instead of a dropdown and a filter text box. See how it's done and if it works both with dropdown data and how I learned to filter\n * @todo \n *  #### List View\n *    DONE --> _1° Requirement_: USE THE BULMA CSS FRAMEWORK! create a list view, whose state starts with all locations, but, when results are filtered, shows only these results. Mobile First! Maybe use an hamburger menu from [Bulma](https://bulma.io/documentation/components/dropdown/)\n *      DONE --> <aside> tagEvent listener for resize and conditional ternary for global.innerWidth >= 700\n *      DONE --> _1° Requirement_: [should I update classes using state, or make components with conditional rendering?](https://stackoverflow.com/questions/36403101/toggle-class-in-react/36404061)\n *      DONE --> _2° Requirement_: When a location in the List-view is clicked, it triggers it's marker's animation and infowindow\n *\t\t\tDONE --> locations bar, when a location is focused, state changes, so it's infoWindow will show on true, because props true for that referral ID 'll will be passed upon it on focus\n *\t\t\tDONE --> On Map.js, If there's only 1 location left, show it's InfoWindow\n *  \t\tDONE --> If that isn't enough, back button (or get all locations again), on top of aside, to call for Squarespace API again\n *  \t\tDONE --> On Filter.js, onChange={if(location.length === 1) new request for data and filter again based on current input value ( App.state.query | e.target.value)}\n *\t\t\tOPTIONAL --> https://builtvisible.com/hierarchical-composed-state-react-js/\n *\t\t\tOPTIONAL --> https://reactjs.org/docs/context.html\n* @todo\n * ## Accessibility\n *  DONE --> add/modify semantic elements and, subsidiarily, `aria roles`\n * @todo\n * ## @todo MAYBE add cms, like squarespace, to retrieve locations data\n *  DONE --> implement API for locations details\n    ```\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n/**\n * Registers service worker\n * @func\n */\nserviceWorker.register()"],"sourceRoot":""}